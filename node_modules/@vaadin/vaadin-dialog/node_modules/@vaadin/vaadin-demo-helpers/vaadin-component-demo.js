import { PolymerElement } from '@polymer/polymer/polymer-element.js';
import '@polymer/polymer/lib/elements/dom-repeat.js';
import '@polymer/app-route/app-location.js';
import '@polymer/app-route/app-route.js';
import { FetchDemoDataMixin } from './vaadin-fetch-demo-data-mixin.js';
import { html } from '@polymer/polymer/lib/utils/html-tag.js';
const $_documentContainer = document.createElement('template');

$_documentContainer.innerHTML = `<dom-module id="vaadin-component-demo-shared-styles">
  <template>
    <style>
      body {
        font-family: -apple-system, BlinkMacSystemFont, "Roboto", "Segoe UI", Ubuntu, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
        -webkit-text-size-adjust: 100%;
        margin: 0 1em 2em;
      }

      :host {
        line-height: 1.6;
        color: #36393d;
      }

      h3 {
        color: #2d3033;
        font-weight: 300;
        font-size: 1.66667rem;
        margin-bottom: 1rem;
        line-height: 1.5;
      }

      h4 {
        font-weight: 300;
        text-transform: uppercase;
        letter-spacing: .15em;
        font-size: 1rem;
        margin-bottom: 1rem;
        margin-top: 1.13333rem;
        line-height: 1.4;
      }

      code {
        font-family: "Source Code Pro", "Consolas", "Bitstream Vera Sans Mono", "Courier New", Courier, monospace;
        font-size: 0.875em;
      }

      a {
        text-decoration: none;
        color: #00b4f0;
        transition: all .2s ease-in-out;
      }

      a:hover,
      a:focus {
        color: #57d5ff;
      }
    </style>
  </template>
</dom-module>`;

document.head.appendChild($_documentContainer.content);
class VaadinComponentDemo extends FetchDemoDataMixin(PolymerElement) {
  static get template() {
    return html`
    <style>
      :host {
        display: block;
        max-width: 60em;
        margin-left: auto;
        margin-right: auto;
      }

      nav {
        box-shadow: inset 0 -1px 0 0 rgba(0, 0, 0, 0.1);
        margin-bottom: 3em;
        overflow: auto;
        -webkit-overflow-scrolling: touch;
      }

      nav ul {
        padding: 0;
        margin: 0;
        display: flex;
      }

      nav ul li {
        list-style: none;
        flex: none;
      }

      nav a {
        display: inline-block;
        padding: 1em;
      }

      nav a {
        color: #829191;
        text-decoration: none;
        border-bottom: 2px solid transparent;
      }

      nav a:focus,
      nav a:hover,
      nav a[active] {
        color: #2d3033;
      }

      nav a[active] {
        border-color: #44d62c;
      }
    </style>

    <app-location id="appLocation" route="{{route}}" use-hash-as-path="[[devMode]]" url-space-regex="[[urlSpaceRegex]]"></app-location>
    <app-route id="appRoute" route="{{route}}" pattern="[[routePattern]]:page" data="{{routeData}}"></app-route>

    <nav id="nav">
      <ul>
        <template is="dom-repeat" items="[[_demoConfig.pages]]" as="page" id="navigationRepeat">
          <li><a href\$="[[linkBase]][[page.url]]" name\$="[[page.url]]">[[page.name]]</a></li>
        </template>
      </ul>
    </nav>

    <div id="demo"></div>
`;
  }

  static get is() {
    return 'vaadin-component-demo';
  }

  static get properties() {
    return {
      configSrc: {
        type: String,
        observer: '_configChanged'
      },
      // Base url for navigation
      baseHref: {
        type: String,
        value: function() {
          return window.location.pathname.replace(/\/([^\/]+\.[^\/]+|)?$/, '');
        }
      },
      // Base url for resolving relative imports
      srcBaseHref: String,
      _demoConfig: Object,
      routeData: Object,
      // Navigation url scope regex
      urlSpaceRegex: String,
      devMode: {
        type: Boolean,
        computed: '_isDevMode(baseHref)'
      },
      linkBase: {
        type: String,
        computed: '_getLinkBase(devMode, baseHref)'
      },
      routePattern: {
        type: String,
        computed: '_getRoutePattern(devMode, linkBase)'
      },
      selectedPage: {
        type: String,
        observer: '_pageChanged'
      },
      navigationRepeatReady: {
        type: Boolean,
        value: false
      }
    };
  }

  _isDevMode(baseHref) {
    // FIXME: find a better way to detect when demo is running in flow
    return /^cdn|github\.io|appspot\.com$/.test(location.hostname) || /\/components\/(@vaadin\/)?[a-z\-]+\/demo/.test(baseHref);
  }

  // Use hash fragment for navigation if we are using polyserve URL
  _getLinkBase(devMode, baseHref) {
    return !devMode ? baseHref + '/' : '#';
  }

  _getRoutePattern(devMode, linkBase) {
    return !devMode ? linkBase : '';
  }

  ready() {
    super.ready();
    if (!this.srcBaseHref) {
      this.srcBaseHref = this.baseHref;
    }
    if (!this.urlSpaceRegex) {
      this.urlSpaceRegex = this.baseHref.replace(/\//g, '\\/');
    }
    this.$.navigationRepeat.addEventListener('dom-change', () => {
      this.navigationRepeatReady = true;
    });
  }

  static get observers() {
    return [
      '_routePageChanged(routeData.page, navigationRepeatReady)',
    ];
  }

  _routePageChanged(page, navigationRepeatReady) {
    if (!page) {
      return;
    }

    this.selectedPage = page;

    if (navigationRepeatReady) {
      Array.from(this.$.nav.querySelectorAll('a')).forEach(e => e.removeAttribute('active'));
      const activeLink = this.$.nav.querySelector('a[name="' + page + '"]');
      activeLink.setAttribute('active', '');
      activeLink.scrollIntoView();
    }
  }

  _configChanged(configSrc) {
    if (configSrc) {
      this.fetchJSON(configSrc)
        .then(json => {
          this._demoConfig = json;
          this.selectedPage = undefined;
          if (json.pages && json.pages.length > 0) {
            // Select first page by default and update url
            this.selectedPage = this.routeData.page || json.pages[0].url;
            if (!this.routeData.page) {
              this.$.appLocation.set('path', (this.devMode ? '' : this.linkBase) + this.selectedPage);
            }
          }
        })
        .catch(err => {
          console.error(`ERROR: Failed to load demo data for '${configSrc}'`, err);
        });
    }
  }

  _pageChanged(selectedPage) {
    if (!selectedPage || !this._demoConfig) {
      return;
    }

    let page;
    if (selectedPage) {
      page = this._demoConfig.pages.filter(page => page.url === selectedPage)[0];
    } else {
      page = this._demoConfig.pages[0];
    }

    if (!page) {
      console.error(`ERROR: Could not find demo page '${selectedPage}.'`);
      return;
    }

    this.fetchResource(this.srcBaseHref + '/' + page.src)
      .then(() => {
        this._showDemo(page.url);
      })
      .catch(err => {
        console.error(`ERROR: Failed to load demo page for '${selectedPage}'`, err);
      });
  }

  _showDemo(tagName) {
    const element = document.createElement(tagName);
    this.$.demo.innerHTML = '';
    this.$.demo.appendChild(element);
  }
}
window.customElements.define(VaadinComponentDemo.is, VaadinComponentDemo);
