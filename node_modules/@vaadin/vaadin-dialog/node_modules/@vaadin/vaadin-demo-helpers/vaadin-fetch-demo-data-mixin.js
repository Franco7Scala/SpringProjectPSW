const version = window['Polymer'] && window['Polymer'].version;
const useHtmlImports = version && version.indexOf('2') === 0;

const loadScript = path => {
  let script = document.body.querySelector('script[src="' + path + '"][async]');

  // if the script already loaded, resolve immediately
  if (script && script.parentNode === document.body && script.__dynamicImportLoaded) {
    return Promise.resolve();
  }

  return new Promise((resolve, reject) => {
    script = document.createElement('script');
    script.setAttribute('src', path);

    // only use ES modules for Polymer 3
    if (!useHtmlImports) {
      script.setAttribute('type', 'module');
    }

    script.async = true;

    script.onreadystatechange = script.onload = e => {
      script.__dynamicImportLoaded = true;
      resolve(e);
    };

    script.onerror = e => {
      // In case of an error, remove the script from the document so that it
      // will be automatically created again the next time
      if (script.parentNode) {
        script.parentNode.removeChild(script);
      }
      reject(e);
    };

    document.body.appendChild(script);
  });
};

/**
 * @polymerMixin
 */
export const FetchDemoDataMixin = superClass => class VaadinFetchDemoDataMixin extends superClass {

  fetchJSON(url) {
    return new Promise((resolve, reject) => {
      const xhr = new XMLHttpRequest();
      xhr.onload = e => {
        if (xhr.status == 200) {
          const json = JSON.parse(xhr.responseText);
          resolve(json);
        } else if (xhr.status == 404) {
          reject(e);
        }
      };
      xhr.open('GET', url);
      xhr.send();
    });
  }

  fetchResource(url) {
    return loadScript(url);
  }
};
