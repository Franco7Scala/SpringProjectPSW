"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const babel_target_entry_plugin_1 = require("./babel.target.entry.plugin");
const babel_target_single_entry_dependency_1 = require("./babel.target.single.entry.dependency");
class BabelTargetSingleEntryPlugin extends babel_target_entry_plugin_1.BabelTargetEntryPlugin {
    constructor(targets, context, name, entry) {
        super(targets, context, name);
        this.entry = entry;
    }
    apply(compiler) {
        super.apply(compiler);
        compiler.hooks.make.tapPromise('BabelTargetSingleEntryPlugin', (compilation) => __awaiter(this, void 0, void 0, function* () {
            yield Promise.all(this.targets.map((target) => __awaiter(this, void 0, void 0, function* () {
                const dep = BabelTargetSingleEntryPlugin.createDependency(target, this.entry, this.name);
                return yield this.addEntry(compilation, dep);
            })));
        }));
    }
    static createDependency(target, entry, name) {
        return new babel_target_single_entry_dependency_1.BabelTargetSingleEntryDependency(target, entry, name);
    }
}
exports.BabelTargetSingleEntryPlugin = BabelTargetSingleEntryPlugin;
//# sourceMappingURL=babel.target.single.entry.plugin.js.map